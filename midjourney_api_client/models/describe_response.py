# coding: utf-8

"""
    Midjourney API by useapi.net

    Simple, reliable and affordable way to use Midjourney via standard REST API

"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator
from midjourney_api_client.models.job_response_embeds_inner import JobResponseEmbedsInner

class DescribeResponse(BaseModel):
    """
    DescribeResponse
    """
    jobid: StrictStr = Field(..., description="Use returned jobid value to retrieve job status and results")
    verb: StrictStr = Field(...)
    status: StrictStr = Field(...)
    created: StrictStr = Field(...)
    updated: StrictStr = Field(...)
    describe_url: StrictStr = Field(..., alias="describeUrl")
    channel: StrictStr = Field(...)
    server: StrictStr = Field(...)
    max_jobs: StrictInt = Field(..., alias="maxJobs")
    message_id: StrictStr = Field(..., alias="messageId")
    content: StrictStr = Field(..., description="Contains message generated by Midjourney reflecting current generation parameters and progress")
    embeds: Optional[conlist(JobResponseEmbedsInner)] = Field(None, description="Contains additional information")
    timestamp: StrictStr = Field(...)
    code: StrictInt = Field(...)
    __properties = ["jobid", "verb", "status", "created", "updated", "describeUrl", "channel", "server", "maxJobs", "messageId", "content", "embeds", "timestamp", "code"]

    @validator('verb')
    def verb_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('describe'):
            raise ValueError("must be one of enum values ('describe')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('started', 'completed'):
            raise ValueError("must be one of enum values ('started', 'completed')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DescribeResponse:
        """Create an instance of DescribeResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in embeds (list)
        _items = []
        if self.embeds:
            for _item in self.embeds:
                if _item:
                    _items.append(_item.to_dict())
            _dict['embeds'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DescribeResponse:
        """Create an instance of DescribeResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DescribeResponse.parse_obj(obj)

        _obj = DescribeResponse.parse_obj({
            "jobid": obj.get("jobid"),
            "verb": obj.get("verb"),
            "status": obj.get("status"),
            "created": obj.get("created"),
            "updated": obj.get("updated"),
            "describe_url": obj.get("describeUrl"),
            "channel": obj.get("channel"),
            "server": obj.get("server"),
            "max_jobs": obj.get("maxJobs"),
            "message_id": obj.get("messageId"),
            "content": obj.get("content"),
            "embeds": [JobResponseEmbedsInner.from_dict(_item) for _item in obj.get("embeds")] if obj.get("embeds") is not None else None,
            "timestamp": obj.get("timestamp"),
            "code": obj.get("code")
        })
        return _obj


