# coding: utf-8

"""
    Midjourney API by useapi.net

    Simple, reliable and affordable way to use Midjourney via standard REST API

"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator
from midjourney_api_client.models.job_response_attachments_inner import JobResponseAttachmentsInner
from midjourney_api_client.models.job_response_children_inner import JobResponseChildrenInner
from midjourney_api_client.models.job_response_embeds_inner import JobResponseEmbedsInner

class JobResponse(BaseModel):
    """
    JobResponse
    """
    jobid: StrictStr = Field(...)
    parent_job_id: Optional[StrictStr] = Field(None, alias="parentJobId")
    verb: StrictStr = Field(...)
    status: StrictStr = Field(..., description="If value is created, started or progress wait in a loop for at least 10..30 seconds and retry again")
    created: StrictStr = Field(...)
    updated: Optional[StrictStr] = None
    prompt: Optional[StrictStr] = None
    blend_urls: Optional[conlist(StrictStr)] = Field(None, alias="blendUrls")
    blend_dimensions: Optional[StrictStr] = Field(None, alias="blendDimensions")
    describe_url: Optional[StrictStr] = Field(None, alias="describeUrl")
    button: Optional[StrictStr] = None
    children: Optional[conlist(JobResponseChildrenInner)] = None
    buttons: Optional[conlist(StrictStr)] = None
    channel: StrictStr = Field(...)
    server: StrictStr = Field(...)
    max_jobs: StrictInt = Field(..., alias="maxJobs")
    message_id: Optional[StrictStr] = Field(None, alias="messageId")
    content: Optional[StrictStr] = Field(None, description="Message generated by Midjourney reflecting current generation parameters and progress")
    timestamp: Optional[StrictStr] = None
    attachments: Optional[conlist(JobResponseAttachmentsInner)] = None
    embeds: Optional[conlist(JobResponseEmbedsInner)] = Field(None, description="Contains additional information")
    code: StrictInt = Field(...)
    __properties = ["jobid", "parentJobId", "verb", "status", "created", "updated", "prompt", "blendUrls", "blendDimensions", "describeUrl", "button", "children", "buttons", "channel", "server", "maxJobs", "messageId", "content", "timestamp", "attachments", "embeds", "code"]

    @validator('verb')
    def verb_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('imagine', 'button', 'blend', 'describe'):
            raise ValueError("must be one of enum values ('imagine', 'button', 'blend', 'describe')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('created', 'started', 'moderated', 'progress', 'completed', 'failed', 'cancelled'):
            raise ValueError("must be one of enum values ('created', 'started', 'moderated', 'progress', 'completed', 'failed', 'cancelled')")
        return value

    @validator('blend_dimensions')
    def blend_dimensions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Portrait', 'Square', 'Landscape'):
            raise ValueError("must be one of enum values ('Portrait', 'Square', 'Landscape')")
        return value

    @validator('button')
    def button_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('U1', 'U2', 'U3', 'U4', 'V1', 'V2', 'V3', 'V4', '⬅️', '➡️', '⬆️', '⬇️', '🔄', 'Vary (Strong)', 'Vary (Subtle)', 'Zoom Out 1.5x', 'Zoom Out 2x', 'Make Square', 'Make Variations', 'Remaster'):
            raise ValueError("must be one of enum values ('U1', 'U2', 'U3', 'U4', 'V1', 'V2', 'V3', 'V4', '⬅️', '➡️', '⬆️', '⬇️', '🔄', 'Vary (Strong)', 'Vary (Subtle)', 'Zoom Out 1.5x', 'Zoom Out 2x', 'Make Square', 'Make Variations', 'Remaster')")
        return value

    @validator('buttons')
    def buttons_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('U1', 'U2', 'U3', 'U4', 'V1', 'V2', 'V3', 'V4', '⬅️', '➡️', '⬆️', '⬇️', '🔄', 'Vary (Strong)', 'Vary (Subtle)', 'Zoom Out 1.5x', 'Zoom Out 2x', 'Make Square', 'Make Variations', 'Remaster'):
                raise ValueError("each list item must be one of ('U1', 'U2', 'U3', 'U4', 'V1', 'V2', 'V3', 'V4', '⬅️', '➡️', '⬆️', '⬇️', '🔄', 'Vary (Strong)', 'Vary (Subtle)', 'Zoom Out 1.5x', 'Zoom Out 2x', 'Make Square', 'Make Variations', 'Remaster')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JobResponse:
        """Create an instance of JobResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item in self.children:
                if _item:
                    _items.append(_item.to_dict())
            _dict['children'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item in self.attachments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in embeds (list)
        _items = []
        if self.embeds:
            for _item in self.embeds:
                if _item:
                    _items.append(_item.to_dict())
            _dict['embeds'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JobResponse:
        """Create an instance of JobResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JobResponse.parse_obj(obj)

        _obj = JobResponse.parse_obj({
            "jobid": obj.get("jobid"),
            "parent_job_id": obj.get("parentJobId"),
            "verb": obj.get("verb"),
            "status": obj.get("status"),
            "created": obj.get("created"),
            "updated": obj.get("updated"),
            "prompt": obj.get("prompt"),
            "blend_urls": obj.get("blendUrls"),
            "blend_dimensions": obj.get("blendDimensions"),
            "describe_url": obj.get("describeUrl"),
            "button": obj.get("button"),
            "children": [JobResponseChildrenInner.from_dict(_item) for _item in obj.get("children")] if obj.get("children") is not None else None,
            "buttons": obj.get("buttons"),
            "channel": obj.get("channel"),
            "server": obj.get("server"),
            "max_jobs": obj.get("maxJobs"),
            "message_id": obj.get("messageId"),
            "content": obj.get("content"),
            "timestamp": obj.get("timestamp"),
            "attachments": [JobResponseAttachmentsInner.from_dict(_item) for _item in obj.get("attachments")] if obj.get("attachments") is not None else None,
            "embeds": [JobResponseEmbedsInner.from_dict(_item) for _item in obj.get("embeds")] if obj.get("embeds") is not None else None,
            "code": obj.get("code")
        })
        return _obj


